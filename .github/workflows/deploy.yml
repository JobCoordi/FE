name: Deploy                # 워크플로 이름 (GitHub Actions 탭에 표시됨)

on:
  push:
    branches: ['feature']   # feature 브랜치에 push 될 때만 워크플로 실행

jobs:
  build:
    runs-on: ubuntu-latest  # 최신 Ubuntu 서버에서 실행
    container: pandoc/latex # pandoc/latex Docker 컨테이너 환경에서 실행
    steps:
      - uses: actions/checkout@v2  # 현재 레포지토리 코드를 체크아웃 (가져오기)

      - name: Install mustache (to update the date)
        run: apk add ruby && gem install mustache  
        # Alpine Linux에서 Ruby 설치 후, Mustache 템플릿 엔진 설치
        # (ex: 문서 날짜 업데이트에 사용될 가능성)

      - name: creates output
        run: sh ./build.sh  
        # build.sh 스크립트를 실행하여 output 디렉토리에 결과물을 생성

      - name: Pushes to another repository
        id: push_directory
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.HWICHUL_GITHUB_KEY }}  # GitHub Personal Access Token (secrets에 저장된 값)
        with:
          source-directory: 'output'  # 업로드할 로컬 폴더 경로 (output 폴더)
          destination-github-username: hwiiron  # 복사할 대상 깃허브 계정 이름
          destination-repository-name: taskify  # 복사할 대상 레포지토리 이름
          user-email: ${{ secrets.HWICHUL_ACCOUNT_EMAIL }}  # 커밋할 때 사용할 사용자 이메일 (secrets에 저장된 값)
          commit-message: ${{ github.event.commits[0].message }}  # push 발생한 원래 커밋 메시지를 그대로 사용
          target-branch: feature  # 복사할 대상 저장소의 브랜치 이름 (feature 브랜치)

      - name: Test get variable exported by push-to-another-repository
        run: echo $DESTINATION_CLONED_DIRECTORY  
        # 위 액션(cpina) 실행 후 만들어진 환경변수 DESTINATION_CLONED_DIRECTORY 값을 출력 (디버깅용)
